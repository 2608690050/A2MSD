pip install Flask Flask-SQLAlchemy
from flask import Flask, request, redirect, url_for, render_template, flash, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'  # 用于会话安全
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)

# 用户模型
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

# 创建数据库
with app.app_context():
    db.create_all()

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        
        if User.query.filter_by(email=email).first():
            flash('Email already exists!')
            return redirect(url_for('register'))

        # 哈希密码并保存用户
        hashed_password = generate_password_hash(password, method='sha256')
        new_user = User(email=email, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        
        flash('Registration successful!')
        return redirect(url_for('login'))
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            flash('Login successful!')
            return redirect(url_for('home'))
        else:
            flash('Login failed! Check your email and password.')
            return redirect(url_for('login'))
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    flash('You have been logged out!')
    return redirect(url_for('home'))

if __name__ == '__main__':
    app.run(debug=True)




from flask import Flask, request, render_template, redirect, url_for, flash
from flask_mail import Mail, Message
import random
import string

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 用于会话加密

# Flask-Mail 配置
app.config['MAIL_SERVER'] = 'smtp.example.com'  # SMTP 服务器
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'your_email@example.com'  # 发件人邮箱
app.config['MAIL_PASSWORD'] = 'your_email_password'  # 发件人邮箱密码
app.config['MAIL_DEFAULT_SENDER'] = 'your_email@example.com'  # 默认发件人
mail = Mail(app)

# 假设用户数据存储在这个字典中
users = {
    "user@example.com": {
        "password": "old_password"
    }
}

def generate_token(length=6):
    """生成随机重置令牌"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

@app.route('/request_reset', methods=['GET', 'POST'])
def request_reset():
    """请求密码重置"""
    if request.method == 'POST':
        email = request.form['email']
        if email in users:
            token = generate_token()
            users[email]['reset_token'] = token  # 存储重置令牌

            # 发送重置密码邮件
            msg = Message("Password Reset Request", recipients=[email])
            msg.body = f"Your reset token is: {token}. Use it to reset your password."
            mail.send(msg)

            flash('A reset token has been sent to your email.', 'info')
            return redirect(url_for('request_reset'))
        else:
            flash('Email not found.', 'danger')
    return render_template('request_reset.html')

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    """重置密码"""
    if request.method == 'POST':
        new_password = request.form['password']
        for email, data in users.items():
            if data.get('reset_token') == token:
                data['password'] = new_password  # 更新密码
                del data['reset_token']  # 删除令牌
                flash('Your password has been reset!', 'success')
                return redirect(url_for('request_reset'))
        flash('Invalid or expired token.', 'danger')

    return render_template('reset_password.html', token=token)

if __name__ == '__main__':
    app.run(debug=True)
